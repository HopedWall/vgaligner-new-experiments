configfile: "config.yaml"

datasets = config["datasets"].split(",")
kmersize = config["kmersize"]
threshold = config["threshold"]

rule all:
	input:
		expand("comparisons/{path}_graphaligner.txt", path=datasets),
		expand("comparisons/{path}_vgaligner.txt", path=datasets),
		expand("comparisons/{path}_vgmap.txt", path=datasets),
		expand("comparisons/{path}_giraffe.txt", path=datasets),
		expand("comparisons/{path}_graphchainer.txt", path=datasets)

##### Sort the graph #####
rule odgi_sort:
	input:
		"graph.gfa"
	output:
		"sorted_starting_graph.gfa"
	threads: 8
	shell:
		"odgi sort -i {input} -o - -p Ygs -P -t {threads} | odgi view -i - -g -t {threads} > {output}"

##### Split into connected components #####
rule odgi_explode:
	input:
		"sorted_starting_graph.gfa"
	output:
		"component.0.og"
	threads: 8
	shell:
		"odgi explode -i {input} -t {threads}"

##### Convert .og into .gfa #####
rule odgi_convert:
	input:
		"component.0.og"
	output:
		"sorted_graph.gfa"
	shell:
		"odgi view -i {input} -g > {output}"

##### Create a fasta file with all the paths #####
rule get_paths:
	input:
		"sorted_graph.gfa"
	output:
		"paths.fasta"
	shell:
		"odgi paths -i {input} -f > {output}"

##### Split fasta into separate files #####
rule split_paths:
	input:
		"paths.fasta"
	output:
		expand("{path}.fa", path=datasets)
	shell:
		"awk -f split.awk {input}"

##### Read generation with pbsim #####
rule pbsim_generate:
	input:
		"{path}.fa"
	output:
		"reads/{path}_0001.fastq"
	shell:
		"pbsim '{input}' --model_qc ../models/model_qc_clr --prefix 'reads/{wildcards.path}'"

##### Run vgaligner #####
rule vgaligner_index:
	input:
		"sorted_graph.gfa"
	output:
		index = "sorted_graph.idx",
		mappings = "mappings.json"
	threads: 8
	log:
		log = "logs/vgaligner_index.log",
		time = "logs/vgaligner_index.time"
	shell:
		"/usr/bin/time -v -o '{log.time}' vgaligner index -i {input} -k {kmersize} -t {threads} -o {output.index} --generate-mappings > {log.log}"

rule vgaligner_map:
	input:
		index = "sorted_graph.idx",
		reads = "reads/{path}_0001.fastq"
	output:
		"results/{path}_vgaligner.gaf"
	threads: 8
	log:
		log = "logs/{path}_vgaligner_map.log",
		time = "logs/{path}_vgaligner_map.time"
	shell:
		"/usr/bin/time -v -o '{log.time}' vgaligner map -i {input.index} -f '{input.reads}' --also-align -t {threads} -o '{output}' > '{log.log}'"

##### Run VG #####
rule vg_view_gfa_to_vg:
	input:
		"sorted_graph.gfa"
	output:
		"sorted_graph_temp.vg"
	shell:
		"vg view -F {input} -v > {output}"

rule vg_mod:
	input:
		"sorted_graph_temp.vg"
	output:
		"sorted_graph.vg"
	shell:
		"vg mod -X 256 {input} > {output}"

rule vg_index:
	input: 
		"sorted_graph.vg"
	output:
		xg="sorted_graph.xg",
		gcsa="sorted_graph.gcsa"
	threads: 8
	log:
		time="logs/vgindex.time"
	shell:
		"/usr/bin/time -v -o {log.time} vg index {input} -x {output.xg} -g {output.gcsa} -k {kmersize} -t {threads}"

rule vg_map:
	input:
		"sorted_graph.xg",
		"sorted_graph.gcsa",
		reads="reads/{path}_0001.fastq"
	output:
		"results/{path}_vgmap.gam"
	threads: 8
	log:
		time="logs/{path}_vgmap.time"
	shell:
		"/usr/bin/time -v -o '{log.time}' vg map -d sorted_graph -f '{input.reads}' -t {threads} > '{output}'"

rule vg_map_convert:
	input: 
		gam="results/{path}_vgmap.gam",
		graph="sorted_graph.gfa"
	output:
		"results/{path}_vgmap.gaf"
	shell:
		"vg convert --gam-to-gaf '{input.gam}' {input.graph} >'{output}'"

##### Run graphaligner #####
rule graphaligner:
	input:
		graph="sorted_graph.gfa",
		reads="reads/{path}_0001.fastq"
	output:
		"results/{path}_graphaligner.gaf"
	threads: 8
	log:
		log="logs/{path}_graphaligner.log",
		time="logs/{path}_graphaligner.time"
	shell:
		"touch '{output}' && /usr/bin/time -v -o '{log.time}' GraphAligner -g {input.graph} -f '{input.reads}' -a '{output}' -x vg -t {threads} > '{log.log}'"

##### Run giraffe #####
# https://github.com/vgteam/vg/wiki/Mapping-short-reads-with-Giraffe

rule vg_autoindex:
	input:
		"sorted_graph.gfa"
	output:
		"index.dist",
		"index.gg",
		"index.giraffe.gbwt",
		"index.min"
	shell:
		"vg autoindex --workflow giraffe -g {input}"

rule vg_giraffe:
	input:
		gbwt_index="index.giraffe.gbwt",
		gbwt_graph="index.gg",
		minimizer_index="index.min",
		dist_index="index.dist",
		reads="reads/{path}_0001.fastq"
	output:
		"results/{path}_giraffe.gaf"
	threads: 8
	shell:
		"vg giraffe -H {input.gbwt_index} -g {input.gbwt_graph} -m {input.minimizer_index} -d {input.dist_index} -f '{input.reads}' -t {threads} -o gaf > '{output}'"

##### Run graphchainer #####
rule graphchainer:
	input:
		graph="sorted_graph.gfa",
		reads="reads/{path}_0001.fastq"
	output:
		"results/{path}_graphchainer.gaf"
	threads: 8
	log:
		log="logs/{path}_graphchainer.log",
		time="logs/{path}_graphchainer.time"
	shell:
		"touch '{output}' && /usr/bin/time -v -o '{log.time}' GraphChainer -g {input.graph} -f '{input.reads}' -a '{output}' -t {threads} > '{log.log}'"

rule vg_map_convert_graphchainer:
	input: 
		gam="results/{path}_graphchainer.gam",
		graph="sorted_graph.gfa"
	output:
		"results/{path}_graphchainer.gaf"
	shell:
		"vg convert --gam-to-gaf '{input.gam}' {input.graph} >'{output}'"

##### Run comparison scripts #####
rule gamcompare_graphaligner:
	input:
		gaf="results/{path}_graphaligner.gaf",
		mappings="mappings.json"
	output:
		"comparisons/{path}_graphaligner.txt"
	shell:
		"python3 ../GAFMAFcomparison2.py '{input.gaf}' {input.mappings} '{wildcards.path}' {threshold} graphaligner > '{output}'"

rule gamcompare_vgaligner:
	input:
		gaf="results/{path}_vgaligner.gaf",
		mappings="mappings.json"
	output:
		"comparisons/{path}_vgaligner.txt"
	shell:
		"python3 ../GAFMAFcomparison2.py '{input.gaf}' {input.mappings} '{wildcards.path}' {threshold} vgaligner > '{output}'"

rule gamcompare_vgmap:
	input:
		gaf="results/{path}_vgmap.gaf",
		mappings="mappings.json"
	output:
		"comparisons/{path}_vgmap.txt"
	shell:
		"python3 ../GAFMAFcomparison2.py '{input.gaf}' {input.mappings} '{wildcards.path}' {threshold} graphaligner > '{output}'"

rule gamcompare_giraffe:
	input:
		gaf="results/{path}_giraffe.gaf",
		mappings="mappings.json"
	output:
		"comparisons/{path}_giraffe.txt"
	shell:
		"python3 ../GAFMAFcomparison2.py '{input.gaf}' {input.mappings} '{wildcards.path}' {threshold} graphaligner > '{output}'"

rule gamcompare_graphchainer:
	input:
		gaf="results/{path}_graphchainer.gaf",
		mappings="mappings.json"
	output:
		"comparisons/{path}_graphchainer.txt"
	shell:
		"python3 ../GAFMAFcomparison2.py '{input.gaf}' {input.mappings} '{wildcards.path}' {threshold} graphaligner > '{output}'"
